//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestizen {
  provider          = "node ../graphql-generator/dist/index.js"
  output            = "../src/nestizen"
  prismaServicePath = "./src/prisma/prisma.service.ts"
  prismaServiceName = "PrismaService"
}

/// UserRole Documentation
enum UserRole {
  /// UserRole USER
  USER
  /// UserRole ADMIN
  ADMIN
  /// UserRole MODERATOR
  MODERATOR
}

enum PostKind {
  BLOG
  ADVERT
}

/// User model documentation
model User {
  id           Int      @id() @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  /// Email field documentation
  email        String   @unique()
  /// Multiple line
  /// documentation
  name         String?
  role         UserRole @default(USER)
  /// One to many relation with Post
  posts        Post[]
  parentId     Int?
  /// Self relation with User
  parent       User?    @relation("UserToUser", fields: [parentId], references: [id])
  /// Self relation with User
  children     User[]   @relation("UserToUser")
  /// Another Many to many relation with Post
  anotherPosts Post[]   @relation("AnotherUserToPost")
  mappedField  String   @map("mapped_field")
  tags         Tag[]
  profile      Profile?
}

model Profile {
  id        Int      @id() @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique()
}

/// @@allow('all', auth().role == 'ADMIN')
model Post {
  id              Int        @id() @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt()
  title           String
  content         String?
  published       Boolean    @default(false)
  /// Many to one relation with User
  author          User       @relation(fields: [authorId], references: [id])
  authorId        Int
  /// Another Many to one relation with User
  anotherAuthor   User       @relation("AnotherUserToPost", fields: [anotherAuthorId], references: [id])
  anotherAuthorId Int
  /// Many to many relation with Category
  categories      Category[]
  postKind        PostKind
}

model Tag {
  key   String @id()
  users User[]
}

model Category {
  id        Int               @id() @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt()
  name      String            @unique()
  /// Many to many relation with Post
  /// @graphql.hideResolveField
  posts     Post[]
  /// One to one relation with CategoryMetadata
  metadata  CategoryMetadata?
}

model CategoryMetadata {
  id         Int      @id() @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  /// One to one relation with Category
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @unique()
  metadata   Json[]
}

/// @@graphql.hideOperations([GQL_OP_CREATE, GQL_OP_UPDATE])
model MiscModel {
  id            Int        @id() @default(autoincrement())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt()
  name          String
  jsonField     Json
  jsonList      Json[]
  stringList    String[]
  decimalField  Decimal
  decimalList   Decimal[]
  /// @graphql.hideField
  floatField    Float
  /// @graphql.hideField(output: true)
  bytesField    Bytes
  /// @graphql.hideField(match: '*@(Create|Update)*Input')
  bytesList     Bytes[]
  /// @graphql.hideField(output: true, input: true)
  bigIntField   BigInt
  bigIntList    BigInt[]
  dateTimeField DateTime
  /// @graphql.hideField(input: true)
  dateTimeList  DateTime[]
}

/// @@graphql.hideOperations([GQL_OP_ALL])
model HiddenModel {
  id        Int      @id() @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  data      Json
}
