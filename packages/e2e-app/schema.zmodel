generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

plugin prisma {
    provider = '@core/prisma'
    customAttributesAsComments = true
    generateClient = true
}

plugin enhancer {
    provider = '@core/enhancer'
    generatePermissionChecker = true
}

plugin nestizen {
    provider = "@nestizen/graphql-plugin"
    output = "./src/nestizen"
    prismaServicePath = "./src/prisma/prisma.service.ts"
    prismaServiceName = "PrismaService"
}

/// UserRole Documentation
enum UserRole {
    /// UserRole USER
    USER
    /// UserRole ADMIN
    ADMIN
    /// UserRole MODERATOR
    MODERATOR
}

enum PostKind {
    BLOG
    ADVERT
}

abstract model Base {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

/// User model documentation
model User extends Base {
    /// Email field documentation
    email        String   @unique
    /// Multiple line
    /// documentation
    name         String?
    role         UserRole @default(USER)
    /// One to many relation with Post
    posts        Post[]
    parentId     Int?
    /// Self relation with User
    parent       User?    @relation("UserToUser", fields: [parentId], references: [id])
    /// Self relation with User
    children     User[]   @relation("UserToUser")
    /// Another Many to many relation with Post
    anotherPosts Post[]   @relation("AnotherUserToPost")
    mappedField  String   @map("mapped_field")

    tags         Tag[]

    profile      Profile?
}

model Profile extends Base {
    bio    String?
    user   User    @relation(fields: [userId], references: [id])
    userId Int     @unique
}

model Post extends Base {
    title           String
    content         String?
    published       Boolean    @default(false)
    /// Many to one relation with User
    author          User       @relation(fields: [authorId], references: [id])
    authorId        Int        @default(auth().id)
    /// Another Many to one relation with User
    anotherAuthor   User       @relation("AnotherUserToPost", fields: [anotherAuthorId], references: [id])
    anotherAuthorId Int
    /// Many to many relation with Category
    categories      Category[]
    postKind        PostKind

    @@allow('all', auth().role == 'ADMIN')
}

model Tag {
    key   String @id

    users User[]
}

model Category extends Base {
    name     String            @unique
    /// Many to many relation with Post
    posts    Post[]            @graphql.hideResolveField
    /// One to one relation with CategoryMetadata
    metadata CategoryMetadata?
}

model CategoryMetadata extends Base {
    /// One to one relation with Category
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int      @unique
    metadata   Json[]
}

model MiscModel extends Base {
    name          String
    jsonField     Json
    jsonList      Json[]
    stringList    String[]
    decimalField  Decimal
    decimalList   Decimal[]
    floatField    Float      @graphql.hideField
    bytesField    Bytes      @graphql.hideField(output: true)
    bytesList     Bytes[]    @graphql.hideField(match: '*@(Create|Update)*Input')
    bigIntField   BigInt     @graphql.hideField(output: true, input: true)
    bigIntList    BigInt[]
    dateTimeField DateTime
    dateTimeList  DateTime[] @graphql.hideField(input: true)

    @@graphql.hideOperations([GQL_OP_CREATE, GQL_OP_UPDATE])
}

model HiddenModel extends Base {
    data Json

    @@graphql.hideOperations([GQL_OP_ALL])
}
