/**
 * -----------------------------------------------------------------------------
 * WARNING:
 * This file is auto-generated by @nestizen/graphql-plugin.
 * Changes to this file will be lost if the code is regenerated.
 * -----------------------------------------------------------------------------
 */

import { ZenPermission } from '@nestizen/runtime';
import {
  Args,
  Int,
  Mutation,
  Parent,
  Query,
  ResolveField,
  Resolver,
} from '@nestjs/graphql';
import {
  AggregateCategoryMetadata,
  Category,
  CategoryMetadata,
  CategoryMetadataAggregateArgs,
  CreateOneCategoryMetadataArgs,
  DeleteOneCategoryMetadataArgs,
  FindManyCategoryMetadataArgs,
  FindUniqueCategoryMetadataArgs,
  UpdateOneCategoryMetadataArgs,
} from '../../nestizen/graphql-types';
import { CategoryMetadataServiceBase } from './category-metadata.service.base';

@Resolver(() => CategoryMetadata)
export class CategoryMetadataResolverBase {
  constructor(public readonly service: CategoryMetadataServiceBase) {}

  @Query(() => CategoryMetadata, { nullable: true })
  @ZenPermission('CategoryMetadata', 'read')
  async categoryMetadata(@Args() args: FindUniqueCategoryMetadataArgs) {
    return this.service.findUnique(args as any);
  }

  @Query(() => [CategoryMetadata], { nullable: false })
  @ZenPermission('CategoryMetadata', 'read')
  async categoryMetadatas(@Args() args: FindManyCategoryMetadataArgs) {
    return this.service.findMany(args as any);
  }

  @Mutation(() => CategoryMetadata, { nullable: false })
  @ZenPermission('CategoryMetadata', 'create')
  async createCategoryMetadata(@Args() args: CreateOneCategoryMetadataArgs) {
    return this.service.create(args as any);
  }

  @Mutation(() => CategoryMetadata, { nullable: false })
  @ZenPermission('CategoryMetadata', 'update')
  async updateCategoryMetadata(@Args() args: UpdateOneCategoryMetadataArgs) {
    return this.service.update(args as any);
  }

  @Mutation(() => CategoryMetadata, { nullable: false })
  @ZenPermission('CategoryMetadata', 'delete')
  async deleteCategoryMetadata(@Args() args: DeleteOneCategoryMetadataArgs) {
    return this.service.delete(args as any);
  }

  @Query(() => Int, { nullable: false })
  @ZenPermission('CategoryMetadata', 'read')
  async categoryMetadataCount(@Args() args: FindManyCategoryMetadataArgs) {
    return this.service.count(args as any);
  }

  @Query(() => AggregateCategoryMetadata, { nullable: false })
  @ZenPermission('CategoryMetadata', 'read')
  async categoryMetadataAggregate(@Args() args: CategoryMetadataAggregateArgs) {
    return this.service.aggregate(args as any);
  }

  @ResolveField(() => Category)
  async category(@Parent() parent: CategoryMetadata) {
    return this.service.resolveCategory(parent);
  }
}
