/**
 * -----------------------------------------------------------------------------
 * WARNING:
 * This file is auto-generated by @nestizen/graphql-plugin.
 * Changes to this file will be lost if the code is regenerated.
 * -----------------------------------------------------------------------------
 */

import { ZenPermission } from '@nestizen/runtime';
import {
  Args,
  Int,
  Mutation,
  Parent,
  Query,
  ResolveField,
  Resolver,
} from '@nestjs/graphql';
import {
  AggregateProfile,
  CreateOneProfileArgs,
  DeleteOneProfileArgs,
  FindManyProfileArgs,
  FindUniqueProfileArgs,
  Profile,
  ProfileAggregateArgs,
  UpdateOneProfileArgs,
  User,
} from '../../nestizen/graphql-types';
import { ProfileServiceBase } from './profile.service.base';

@Resolver(() => Profile)
export class ProfileResolverBase {
  constructor(public readonly service: ProfileServiceBase) {}

  @Query(() => Profile, { nullable: true })
  @ZenPermission('Profile', 'read')
  async profile(@Args() args: FindUniqueProfileArgs) {
    return this.service.findUnique(args as any);
  }

  @Query(() => [Profile], { nullable: false })
  @ZenPermission('Profile', 'read')
  async profiles(@Args() args: FindManyProfileArgs) {
    return this.service.findMany(args as any);
  }

  @Mutation(() => Profile, { nullable: false })
  @ZenPermission('Profile', 'create')
  async createProfile(@Args() args: CreateOneProfileArgs) {
    return this.service.create(args as any);
  }

  @Mutation(() => Profile, { nullable: false })
  @ZenPermission('Profile', 'update')
  async updateProfile(@Args() args: UpdateOneProfileArgs) {
    return this.service.update(args as any);
  }

  @Mutation(() => Profile, { nullable: false })
  @ZenPermission('Profile', 'delete')
  async deleteProfile(@Args() args: DeleteOneProfileArgs) {
    return this.service.delete(args as any);
  }

  @Query(() => Int, { nullable: false })
  @ZenPermission('Profile', 'read')
  async profileCount(@Args() args: FindManyProfileArgs) {
    return this.service.count(args as any);
  }

  @Query(() => AggregateProfile, { nullable: false })
  @ZenPermission('Profile', 'read')
  async profileAggregate(@Args() args: ProfileAggregateArgs) {
    return this.service.aggregate(args as any);
  }

  @ResolveField(() => User)
  async user(@Parent() parent: Profile) {
    return this.service.resolveUser(parent);
  }
}
